F_sonar_angle = robot_position['angle']
        F_sonar_x = robot_position['x']
        F_sonar_y = robot_position['y']
        F_sonar_x = F_sonar_x + 0.125 * math.cos(F_sonar_angle)
        F_sonar_y = F_sonar_y + 0.125 * math.sin(F_sonar_angle)
        print_queue.put(f"Front Sonar position X:{F_sonar_x}, Y:{F_sonar_y}, Angle: {F_sonar_angle}")
        F_sensor_pos = (F_sonar_x, F_sonar_y)
        F_dist = distance_f / 100
        print_queue.put(f"debug first distance {F_dist}")
        F_obstacle_x, F_obstacle_y = calculate_obstacle_xy(F_sonar_angle, F_dist, F_sensor_pos)
        F_obstacle_xy['x'] = F_obstacle_x
        F_obstacle_xy['y'] = F_obstacle_y
        print_queue.put(f"Obstacle Position {F_obstacle_xy}")

        F_position_queue.put(F_obstacle_xy)


def calculate_obstacle_xy(angle, distance, sensor_position):
    """
    Calculate the (x, y) position of an obstacle detected by a sonar sensor.

    Parameters:
        angle (float): The angle (in degrees) at which the obstacle is detected relative to the sensor.
        distance (float): The distance to the obstacle from the sonar sensor.
        sensor_position (tuple): The (x, y) position of the sonar sensor.

    Returns:
        tuple: The (x, y) coordinates of the detected obstacle.
    """
    print_queue.put(f"debug distance {distance}")
    # Convert the angle to radians
    angle_rad = angle

    # Calculate the relative (x, y) position of the obstacle
    relative_x = distance * math.cos(angle_rad)
    relative_y = distance * math.sin(angle_rad)
    print_queue.put(f"debug relative pos {relative_x}, {relative_y}")

    # Calculate the absolute (x, y) position of the obstacle
    sensor_x, sensor_y = sensor_position
    print_queue.put(f"debug pos {sensor_x}, {sensor_y}")
    obstacle_x = sensor_x + relative_x
    obstacle_y = sensor_y + relative_y

    return obstacle_x, obstacle_y
